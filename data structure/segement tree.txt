typedef long long ll;
#define MXN 1000005 //要*4
struct segment_tree{
	ll summ[MXN*4], arr[MXN],tag[MXN*4];
	void push(int l, int r, int v) {
	    summ[v] += tag[v] * (r - l);
	    if (r - l == 1)
	        return tag[v] = 0, void();
	    tag[2 * v + 1] += tag[v];
	    tag[2 * v + 2] += tag[v];
	    tag[v] = 0;
	}
	void pull(int l, int r, int v) {
	    if (r - l == 1)
	        return;
	    int mid = (l + r) / 2;
	    push(l, mid, 2 * v + 1);
	    push(mid, r, 2 * v + 2);
	    summ[v] = summ[2 * v + 1] + summ[2 * v + 2];
	}
	void build(int l, int r, int v = 0) {
	    if (r - l == 1) {
	        summ[v] = arr[l];
	        return;
	    }
	    int mid = (l + r) / 2;
	    build(l, mid, 2 * v + 1);
	    build(mid, r, 2 * v + 2);
	    pull(l, r, v);
	}
	void update(int L, int R, ll val, int l, int r, int v = 0) {//懶標val =值增加val
	    push(l, r, v);
	    if (l == L && R == r) {
	        tag[v] += val;
	        push(l, r, v);
	        return;
	    }
	    int mid = (l + r) / 2;
	    if (R <= mid)
	        update(L, R, val, l, mid, 2 * v + 1);
	    else if (mid <= L)
	        update(L, R, val, mid, r, 2 * v + 2);
	    else
	        update(L, mid, val, l, mid, 2 * v + 1), update(mid, R, val, mid, r, 2 * v + 2);
	    pull(l, r, v);
	}
	ll query(int L, int R, int l, int r, int v = 0) {//LR 目標區間 lr 全部的區間
	    push(l, r, v);
	    if (l == L && R == r)
	        return summ[v];
	    int mid = (l + r) / 2;
	    if (R <= mid)
	        return query(L, R, l, mid, 2 * v + 1);
	    else if (mid <= L)
	        return query(L, R, mid, r, 2 * v + 2);
	    else
	        return query(L, mid, l, mid, 2 * v + 1) + query(mid, R, mid, r, 2 * v + 2);
	}
};