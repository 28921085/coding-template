template <typename T>
#define LEFT (node << 1)
#define RIGHT (node << 1 | 1)
class SegmentTree {
public:
    int n;
    vector<T> tree;
    vector<T> lazy;
    SegmentTree(vector<T>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n, 0);
        build(arr);
    }
    T op(T &a, T &b) { return a + b; }
    void range_op(T &tar,T &up,T &start,T &end){ tar += up*(end-start+1); }
    void push(int node, int start, int end) {
        if (lazy[node] != 0) {
            range_op(tree[node],lazy[node],start,end);
            if (start != end) {
                lazy[LEFT] += lazy[node];
                lazy[RIGHT] += lazy[node];
            }
            lazy[node] = 0;
        }
    }
    void pull(int node) { tree[node] = op(tree[LEFT], tree[RIGHT]); }
    void build(vector<T>& arr, int node = 1, int start = 0, int end = -1) {
        if (end == -1) end = n - 1;
        if (start == end) return tree[node] = arr[start],void();
        int mid = (start + end) >> 1;
        build(arr, LEFT, start, mid);
        build(arr, RIGHT, mid + 1, end);
        pull(node);
    }
    T query(int l, int r, int node = 1, int start = 0, int end = -1) {
        if (end == -1) end = n - 1;
        push(node, start, end);
        if (start > r || end < l) return 0; 
        if (start >= l && end <= r) return tree[node];
        int mid = (start + end) >> 1;
        T leftResult = query(l, r, LEFT, start, mid);
        T rightResult = query(l, r, RIGHT, mid + 1, end);
        return op(leftResult, rightResult);
    }
    void update(int l, int r, T k, int node = 1, int start = 0, int end = -1) {
        if (end == -1) end = n - 1;
        push(node, start, end);
        if (start > r || end < l) return;
        if (start >= l && end <= r) {
            range_op(tree[node],k,start,end);
            if (start != end) {
                lazy[LEFT] += k;
                lazy[RIGHT] += k;
            }
            return;
        }
        int mid = (start + end) >> 1;
        update(l, r, k, LEFT, start, mid);
        update(l, r, k, RIGHT, mid + 1, end);
        pull(node);
    }
};